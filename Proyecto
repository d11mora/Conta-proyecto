#include <iostream.>
#include <conio.h>
#include<stdlib.h>
#include<iomanip>
void menu();
void Apertura();
void Jornalizacion();
void Balnce();
void Resultados();
void General();
void Razones();
void miembros();
void version();

using namespace std;


double Cajabancos = 0, Ventas = 0, Iva_por_pagar = 0, clientes = 0, capital = 0, Ivacc = 0,
Docc = 0, MI = 0, ME = 0, VH = 0, EC = 0, IM = 0, GI = 0, PU = 0, DP = 0, PRO = 0, HP = 0, comp = 0, DESC = 0, SV = 0, PG = 0, PG2 = 0,
SA = 0, DEVVENTAS = 0, DEVCOM, INTG = 0, DEPMB = 0, DEPEC = 0, DEPVH = 0, AMORGO = 0, PRG = 0, VENTASNETAS = 0,
DEPACUMMB = 0, DEPACUMEC = 0, DEPACUMVH, AMORACUMGO = 0, MI2 = 0, COMPRASNETAS = 0, MERCAD = 0, COSTOV = 0, GOP = 0, GOP1 = 0, GOP2 = 0, PRODUCGASTOS = 0,
PEROGANAN = 0, ACCIRCULANTE = 0, ACFIJO = 0, ACDIFERIDO = 0, SUMAACTIVO = 0, PASIVOCIR = 0, PASIVOFIJO = 0, SUMAPASIVO = 0;

int main() {
	system("color 71");
	menu();

	return 0;
}


void menu() {

	bool repite = true;
	int opcion;

	do {
		system("CLS");
		cout << "                                      Menu Principal Proyecto de Contabilidad" << endl;
		cout << "                                                  UMG SEDE ZONA 16" << endl;
		cout << "1.Saldos Iniciales                                        " << endl;
		cout << "2.Jornalizacion                                           " << endl;
		cout << "3.Balance de Saldos                                        " << endl;
		cout << "4.Estado de Perdidas Y Ganacias                           " << endl;
		cout << "5.Balance General                                         " << endl;
		cout << "6.Razones Finacieras                                      " << endl;
		cout << "7.Desarrolladores del Sistema                             " << endl;
		cout << "8.Version del Programa                                    " << endl;
		cout << "9.Salir                                                   " << endl;

		cout << "\nElija una de Las Opciones: "; cin >> opcion;

		

		switch (opcion) {

		case  1: {
			Apertura();
			break;
		}

		case 2: {
			Jornalizacion();
			break;
		}


		case 3: {
			Balnce();
			break;
		}

		case 4:
			Resultados();
			break;
		case 5:
			General();
			break;
		case 6:
			Razones();
			break;
		case 7:
			miembros();
			break;
		case 8:
			version();
		case 9: {

			repite = false;
		}
		}
	} while (repite);

}


void Apertura() {
	system("color 82");
	double debe, haber;
	system("CLS");
	system("color 73");
	cout << "             Saldos Iniciales o  Partida de Apertura" << endl;
	cout << "                           DEBE                  HABER  " << endl;
	cout << "1.Caja y Bancos :          "; cin >> Cajabancos;
	cout << "2.Clientes :               "; cin >> clientes;
	cout << "3.Iva por cobrar:          "; cin >> Ivacc;
	cout << "4.Documento por cobrar     "; cin >> Docc;
	cout << "5.Mercaderia I             "; cin >> MI;
	cout << "6.Mobiliario Y Equipo      "; cin >> ME;
	cout << "7.Vehiculos                "; cin >> VH;
	cout << "8.Equipo de Computacion    "; cin >> EC;
	cout << "9.Inmuebles                "; cin >> IM;
	cout << "10.Gastos de Instalacion   "; cin >> GI;
	cout << "11.Papeleria y utilies     "; cin >> PU;
	cout << "12.Proveedores                                    "; cin >> PRO;
	cout << "13.Documentos por pagar                           "; cin >> DP;
	cout << "14.Hipotecas                                      "; cin >> HP;
	debe = Cajabancos + clientes + Ivacc + Docc + MI + ME + VH + EC + IM + GI + PU;
	haber = PRO + DP + HP;
	capital = debe - haber;
	cout << "18.Capital        :                               " << capital << endl;
	cout << "                      __________________________________________" << endl;
	cout << "Totales                    " << debe << "                   " << haber + capital << endl;
	cout << "                      __________________________________________" << endl;
	cout << "                      __________________________________________" << endl;
	if (capital < 0) {

		cout << "\n\n\n\nHa ingresado mal los valores ya que su capital es Negativo, por favor verifique las cantidades";
	}
	system("pause");
	return menu();
}




void Jornalizacion() {
	int partida;
	bool repite = true;

	do {
		system("CLS");
		cout << "                  Elija el prototipo de Partida que desea Realizar" << endl;
		cout << "1. Partida De Venta  de mercaderia al Contado" << endl;
		cout << "2. Partida De Venta de mercaderia al Credito" << endl;
		cout << "3. Partida De Venta de mercaderia firmando Documentos por Cobrar" << endl;
		cout << "4. Partida De Venta de mercaderia al Credito Y firmando Documentos" << endl;
		cout << "5. Partida De Venta de mercaderia al Credito, Firmando Documentos y Pago al Contado" << endl;
		cout << "6. Partida De Compra  de mercaderia al Contado" << endl;
		cout << "7. Partida De Compra  de mercaderia al Credito" << endl;
		cout << "8. Partida De Compra de meracaderia Firmando Documentos" << endl;
		cout << "9. Partida De Compra de meracaderia al Credito y Firmando Documentos" << endl;
		cout << "10. Partida De Compra de meracaderia al Contado, Credito y Firmando Documentos" << endl;
		cout << "11. Partida De Abono a Deuda adquirida con los proveedores" << endl;
		cout << "12. Partida De Compra de Equipo de Computo" << endl;
		cout << "13. Partida De Abono a Documentos por pagar y descuento por pronto pago" << endl;
		cout << "14. Partida De Abono a Documentos por pagar sin descuento" << endl;
		cout << "15. Partida de Sueldos" << endl;
		cout << "16. Partida de Devolucion de Mercaderia por Clientes" << endl;
		cout << "17. Partida de Devolucion de Mercaderia A   Proveedores" << endl;
		cout << "18. Partida de Pago a Hipotecas Bancarias" << endl;
		cout << "19. Partida de Abono de Clientes" << endl;
		cout << "20. Partida de Abono de Documentos por Cobrar" << endl;
		cout << "21. Partida de Depreciaciones y Amortizaciones" << endl;
		cout << "22. Partida de Cierre Perdidas del Ejercicio" << endl;
		cout << "23. Partida de Cierre Ganancias del Ejercicio" << endl;
		cout << "24. Partida de Cierre Perdida O Ganancias    " << endl;
		cout << "25. Partida de Cierre Activos y Pasivos      " << endl;
		cout << "26. Salir                                    " << endl;
		cout << "Elija la Opcion que Desea: "; cin >> partida;

		switch (partida) {

		case 1: {
			system("CLS");
			double cb1, v1, cb2, v2, ivp1, ivp2;
			cout << "	                        Venta de mercaderia al Contado" << endl;
			cout << "                       DEBE                               HABER    " << endl;
			cout << "\nCAJA Y BANCOS          "; cin >> cb1;
			v1 = cb1 / 1.12;
			cout << "  Ventas                                                    " << fixed << setprecision(2) << v1 << endl;
			ivp1 = v1 * 0.12;
			cout << "  Iva por pagar                                             " << fixed << setprecision(2) << ivp1 << endl;
			cb2 = Cajabancos + cb1;
			Cajabancos = cb2;
			v2 = Ventas + v1;
			Ventas = v2;
			ivp2 = Iva_por_pagar + ivp1;
			Iva_por_pagar = ivp2;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << cb1 << "                                  " << v1 + ivp1 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";

			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 2: {
			system("CLS");
			double cl1, cl2, v3, v4, ivp3, ivp4;
			cout << "	                        Venta de mercaderia al Credito" << endl;
			cout << "                       DEBE                               HABER    " << endl;
			cout << "\nClientes               "; cin >> cl1;
			v3 = cl1 / 1.12;
			cout << "  Ventas                                                    " << fixed << setprecision(2) << v3 << endl;
			ivp3 = v3 * 0.12;
			cout << "  Iva por pagar                                             " << fixed << setprecision(2) << ivp3 << endl;
			cl2 = clientes + cl1;
			clientes = cl2;
			v4 = Ventas + v3;
			Ventas = v4;
			ivp4 = Iva_por_pagar + ivp3;
			Iva_por_pagar = ivp4;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << cl1 << "                                  " << v3 + ivp3 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";

			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");

			break;
		}

		case 3: {
			system("CLS");
			double docc1, docc2, v5, v6, ivp5, ivp6;
			cout << "	                 Venta de mercaderia al Credito con Firma de Documentos" << endl;
			cout << "                       DEBE                               HABER    " << endl;
			cout << "\nDocumentos por cobrar  "; cin >> docc1;
			v5 = docc1 / 1.12;
			cout << "  Ventas                                                    " << fixed << setprecision(2) << v5 << endl;
			ivp5 = v5 * 0.12;
			cout << "  Iva por pagar                                             " << fixed << setprecision(2) << ivp5 << endl;
			docc2 = Docc + docc1;
			Docc = docc2;
			v6 = Ventas + v5;
			Ventas = v6;
			ivp6 = Iva_por_pagar + ivp5;
			Iva_por_pagar = ivp6;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << docc1 << "                                " << v5 + ivp5 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";

			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}
		case 4: {
			system("CLS");
			double docc3, docc4, cl3, cl4, v7, v8, ivp7, ivp8;
			cout << "                Venta de mercaderia al Credito Y Firmando Documentos" << endl;
			cout << "                       DEBE                               HABER    " << endl;
			cout << "\nDocumentos por cobrar  "; cin >> docc3;
			cout << "\nClientes               "; cin >> cl3;
			v7 = (docc3 + cl3) / 1.12;
			cout << "  Ventas                                                    " << fixed << setprecision(2) << v7 << endl;
			ivp7 = v7 * 0.12;
			cout << "  Iva por pagar                                             " << fixed << setprecision(2) << ivp7 << endl;
			docc4 = Docc + docc3;
			Docc = docc4;
			cl4 = clientes + cl3;
			clientes = cl4;
			v8 = Ventas + v7;
			Ventas = v8;
			ivp8 = Iva_por_pagar + ivp7;
			Iva_por_pagar = ivp8;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << docc3 + cl3 << "                     " << v7 + ivp7 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";

			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 5: {
			system("CLS");
			double cb3, cb4, docc5, docc6, cl5, cl6, v9, v10, ivp9, ivp10;
			cout << "Venta de mercaderia al Contado,Credito y Firmando Documentos" << endl;
			cout << "                       DEBE                               HABER    " << endl;
			cout << "\nCaja y Bancos          "; cin >> cb3;
			cout << "\nDocumentos por Cobrar  "; cin >> docc5;
			cout << "\nClientes               "; cin >> cl5;
			v9 = (cb3 + docc5 + cl5) / 1.12;
			cout << "  Ventas                                                    " << fixed << setprecision(2) << v9 << endl;
			ivp9 = v9 * 0.12;
			cout << "  Iva por pagar                                             " << fixed << setprecision(2) << ivp9 << endl;
			docc6 = Docc + docc5;
			Docc = docc6;
			cl6 = clientes + cl5;
			clientes = cl6;
			cb4 = Cajabancos + cb3;
			Cajabancos = cb4;
			v10 = Ventas + v9;
			Ventas = v10;
			ivp10 = Iva_por_pagar + ivp9;
			Iva_por_pagar = ivp10;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << cb3 + docc5 + cl5 << "                     " << v9 + ivp9 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";

			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 6: {
			system("CLS");

			double com1, com2, ivacc1, ivacc2, cb5, cb6;

			cout << "         Compra de Mercaderia al  Contado    " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Caja y Bancos                                      "; cin >> cb5;
			com1 = cb5 / 1.12;
			ivacc1 = com1 * 0.12;
			cout << "\nCompras                " << fixed << setprecision(2) << com1 << endl;
			cout << "\nIva por cobrar         " << fixed << setprecision(2) << ivacc1 << endl;
			cb6 = Cajabancos - cb5;
			Cajabancos = cb6;
			com2 = comp + com1;
			comp = com2;
			ivacc2 = Ivacc + ivacc1;
			Ivacc = ivacc2;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << com1 + ivacc1 << "                     " << cb5 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";

			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 7: {
			system("CLS");
			double com3, com4, ivacc3, ivacc4, pro1, pro2;
			cout << "         Compra de Mercaderia al  Credito    " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Proveedores                                       "; cin >> pro1;
			com3 = pro1 / 1.12;
			ivacc3 = com3 * 0.12;
			cout << "\nCompras                " << fixed << setprecision(2) << com3 << endl;
			cout << "\nIva por cobrar         " << fixed << setprecision(2) << ivacc3 << endl;
			com4 = com3 + comp;
			comp = com4;
			ivacc4 = ivacc3 + Ivacc;
			Ivacc = ivacc4;
			pro2 = pro1 + PRO;
			PRO = pro2;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << com3 + ivacc3 << "                     " << pro1 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";

			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");

			break;
		}

		case 8: {
			system("CLS");
			double dp1, dp2, com5, com6, ivacc5, ivacc6;
			cout << "         Compra de Mercaderia al  Credito Firmando Documentos   " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Documentos por Pagar                                "; cin >> dp1;
			com5 = dp1 / 1.12;
			ivacc5 = com5 * 0.12;
			cout << "\nCompras                " << fixed << setprecision(2) << com5 << endl;
			cout << "\nIva por cobrar         " << fixed << setprecision(2) << ivacc5 << endl;
			dp2 = dp1 + DP;
			DP = dp2;
			com6 = com5 + comp;
			comp = com6;
			ivacc6 = ivacc5 + Ivacc;
			Ivacc = ivacc6;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << com5 + ivacc5 << "                     " << dp1 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");

			break;
		}

		case 9: {
			system("CLS");

			double dp3, dp4, pro3, pro4, com7, com8, ivacc7, ivacc8;

			cout << "         Compra de Mercaderia al  Credito Y Firmando Documentos    " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << " Documetos por pagar                                 "; cin >> dp3;
			cout << " Proveedores                                         "; cin >> pro3;
			com7 = (dp3 + pro3) / 1.12;
			ivacc7 = com7 * 0.12;
			cout << "\nCompras                " << fixed << setprecision(2) << com7 << endl;
			cout << "\nIva por cobrar         " << fixed << setprecision(2) << ivacc7 << endl;
			dp4 = dp3 + DP;
			DP = dp4;
			pro4 = pro3 + PRO;
			PRO = pro4;
			com8 = com7 + comp;
			comp = com8;
			ivacc8 = ivacc7 + Ivacc;
			Ivacc = ivacc8;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << com7 + ivacc7 << "                     " << dp3 + pro3 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");


			break;
		}

		case 10: {
			system("CLS");
			double 	cb7, cb8, pro5, pro6, dp5, dp6, com9, com10, ivacc9, ivacc10;

			cout << "         Compra de Mercaderia al Contado, Credito Y Firmando Documentos    " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << " Caja Y Bancos                                       "; cin >> cb7;
			cout << " Proveedores                                         "; cin >> pro5;
			cout << " Documetos por pagar                                 "; cin >> dp5;
			com9 = (cb7 + pro5 + dp5) / 1.12;
			ivacc9 = com9 * 0.12;
			cout << "\nCompras                " << fixed << setprecision(2) << com9 << endl;
			cout << "\nIva por cobrar         " << fixed << setprecision(2) << ivacc9 << endl;
			cb8 = Cajabancos - cb7;
			Cajabancos = cb8;
			pro6 = pro5 + PRO;
			PRO = pro6;
			dp6 = dp5 + DP;
			DP = dp6;
			com10 = com9 + comp;
			comp = com10;
			ivacc10 = ivacc9 + Ivacc;
			Ivacc = ivacc10;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                " << com9 + ivacc9 << "                     " << cb7 + pro5 + dp5 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 11: {
			system("CLS");
			double pro7, pro8, cb9, cb10;
			cout << "         Abono a Deuda con proveedores   " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << " Proveedores              "; cin >> pro7;
			cb9 = pro7;
			cout << " Caja Y Bancos                                       " << cb9 << endl;
			pro8 = PRO - pro7;
			PRO = pro8;
			cb10 = Cajabancos - cb9;
			Cajabancos = cb10;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << pro7 << "                     " << cb9 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}
		case 12: {
			system("CLS");
			double ec1, ec2, ivacc11, ivacc12, cb11, cb12;
			cout << "         Compra de Equipo de computo   " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << " Caja Y Bancos                                    "; cin >> cb11;
			ec1 = cb11 / 1.12;
			cout << "\nEquipo de Computacion    " << fixed << setprecision(2) << ec1 << endl;
			ivacc11 = ec1 * 0.12;
			cout << "\nIva por cobrar           " << fixed << setprecision(2) << ivacc11 << endl;
			cb12 = Cajabancos - cb11;
			Cajabancos = cb12;
			ec2 = EC + ec1;
			EC = ec2;
			ivacc12 = Ivacc + ivacc11;
			Ivacc = ivacc12;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << ec1 + ivacc11 << "                 " << cb11 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");


			break;
		}

		case 13: {
			system("CLS");
			double dp7, dp8, desc1, desc2, cb13, cb14;

			cout << "         Abono a deuda sobre Documentos con descuentos   " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Documentos por pagar      "; cin >> dp7;
			cout << "\nDescuentos Percibidos                             "; cin >> desc1;
			cb13 = dp7 - desc1;
			cout << " Caja Y Bancos                                    " << cb13 << endl;
			dp8 = DP - dp7;
			DP = dp8;
			desc2 = DESC + desc1;
			DESC = desc2;
			cb14 = Cajabancos - cb13;
			Cajabancos = cb14;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << dp7 << "                 " << desc1 + cb13 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");

			break;
		}
		case 14: {
			system("CLS");
			double dp9, dp10, cb15, cb16;
			cout << "         Abono a deuda sobre Documentos   " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Documentos por pagar      "; cin >> dp9;
			cb15 = dp9;
			cout << " Caja Y Bancos                                    " << cb15 << endl;
			dp10 = DP - dp9;
			DP = dp10;
			cb16 = Cajabancos - cb15;
			Cajabancos = cb16;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << dp9 << "                 " << cb15 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 15: {
			system("CLS");
			double sa1, sa2, sv1, sv2, cb17, cb18;
			cout << "         	Pago de Sueldos de la Empresa   " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Sueldos Administracion    "; cin >> sa1;
			cout << "Sueldos Sala de Ventas    "; cin >> sv1;
			cb17 = sa1 + sv1;
			cout << " Caja Y Bancos                                    " << cb17 << endl;
			sa2 = SA + sa1;
			SA = sa2;
			sv2 = SV + sv1;
			SV = sv2;
			cb18 = Cajabancos - cb17;
			Cajabancos = cb18;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << sa1 + sv1 << "                   " << cb17 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}
		case 16: {
			system("CLS");
			double devsv1, devsv2, cb19, cb20, ivp11, ivp12;
			cout << "         	Devolucion de Mercadería por Clientes  " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << " Caja Y Bancos                                    "; cin >> cb19;
			devsv1 = cb19 / 1.12;
			cout << "\nDevoluciones S/ Ventas     " << fixed << setprecision(2) << devsv1 << endl;
			ivp11 = devsv1 * 0.12;
			cout << "Iva por Pagar              " << fixed << setprecision(2) << ivp11 << endl;
			cb20 = Cajabancos - cb19;
			Cajabancos = cb20;
			devsv2 = DEVVENTAS + devsv1;
			DEVVENTAS = devsv2;
			ivp12 = Iva_por_pagar - ivp11;
			Iva_por_pagar = ivp12;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << devsv1 + ivp11 << "                 " << cb19 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 17: {
			system("CLS");
			double pro9, pro10, devc1, devc2, ivacc13, ivacc14;

			cout << "         	Devolucion de Mercadería A Proveedores " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Proveedores               "; cin >> pro9;
			devc1 = pro9 / 1.12;
			cout << "\nDevoluciones S/ Compras                         " << fixed << setprecision(2) << devc1 << endl;
			ivacc13 = devc1 * 0.12;
			cout << "\nIva por cobrar                                  " << fixed << setprecision(2) << ivacc13 << endl;
			pro10 = PRO - pro9;
			PRO = pro10;
			devc2 = DEVCOM + devc1;
			DEVCOM = devc2;
			ivacc14 = Ivacc - ivacc13;
			Ivacc = ivacc14;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << pro9 << "                 " << devc1 + ivacc13 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 18: {
			system("CLS");
			double hp1, hp2, intg1, intg2, cb21, cb22;

			cout << "         	Abono a Hipoteca Bancaria " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Hipotecas                 "; cin >> hp1;
			cout << "Intereses Gasto           "; cin >> intg1;
			cb21 = hp1 + intg1;
			cout << "\nCaja Y Bancos                                    " << cb21 << endl;
			hp2 = HP - hp1;
			HP = hp2;
			intg2 = INTG + intg1;
			INTG = intg2;
			cb22 = Cajabancos - cb21;
			Cajabancos = cb22;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << hp1 + intg1 << "                " << cb21 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");


			break;
		}
		case 19: {
			system("CLS");
			double cb23, cb24, clie1, clie2;
			cout << "         	Abono de Clientes " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Caja y Bancos             "; cin >> cb23;
			clie1 = cb23;
			cout << "\nClientes                                        " << clie1 << endl;
			cb24 = Cajabancos + cb23;
			Cajabancos = cb24;
			clie2 = clientes - clie1;
			clientes = clie2;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << cb23 << "                " << clie1 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");

			break;
		}
		case 20: {
			system("CLS");
			double cb25, cb26, docc1, docc2;
			cout << "                          Abono a Documentos por cobrar " << endl;
			cout << "                           DEBE                   HABER    " << endl;
			cout << "Caja y Bancos             "; cin >> cb25;
			docc1 = cb25;
			cout << "\nDocumentos por cobrar                             " << docc1 << endl;
			cb26 = Cajabancos + cb25;
			Cajabancos = cb26;
			docc2 = Docc - docc1;
			Docc = docc2;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                    " << cb25 << "                " << docc1 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 21: {
			system("CLS");
			double depmb1, depec1, depvh1, agi1, dacummb1, dacumec1, dacvh1, acumgo1;
			cout << "                     Partida De Depreciaciones y Amortizaciones " << endl;
			cout << "                                        DEBE                   HABER    " << endl;
			depmb1 = ME * 0.20;
			cout << "Depreciacion Mobiliario y Equipo        " << depmb1 << endl;
			depec1 = EC * 0.33;
			cout << "Depreciacion  Equipo de Computo         " << depec1 << endl;
			depvh1 = VH * 0.20;
			cout << "Depreciacion  Vehiculos                 " << depvh1 << endl;
			agi1 = GI * 0.10;
			cout << "Amortizacion Gastos de Organizacion     " << agi1 << endl;
			dacummb1 = depmb1;
			cout << "\n\nDepreciacion Acumulada Mobiliario y Equipo                       " << dacummb1 << endl;
			dacumec1 = depec1;
			cout << "Depreciacion Acumulada Equipo de Computo                         " << dacumec1 << endl;
			dacvh1 = depvh1;
			cout << "Depreciacion Acumulada Vehiculos                                 " << dacvh1 << endl;
			acumgo1 = agi1;
			cout << "Amortizacion Acumulada Gastos de Organizacion                    " << acumgo1 << endl;
			DEPMB = depmb1;
			DEPEC = depec1;
			DEPVH = depvh1;
			AMORGO = agi1;
			DEPACUMMB = dacummb1;
			DEPACUMEC = dacumec1;
			DEPACUMVH = dacvh1;
			AMORACUMGO = acumgo1;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                                 " << depmb1 + depec1 + depvh1 + agi1 << "                        " << dacummb1 + dacumec1 + depvh1 + acumgo1 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}

		case 22: {
			system("CLS");
			cout << "              Partida de Cierre de Perdidas del Ejercicio" << endl;
			cout << "                                        DEBE                   HABER    " << endl;
			cout << "Compras                                                           " << comp << endl;
			cout << "Mercadería I                                                      " << MI << endl;
			cout << "Devoluciones y Rebajas sobre Ventas                               " << DEVVENTAS << endl;
			cout << "Sueldos Administracion                                            " << SA << endl;
			cout << "Sueldos Sala de Ventas                                            " << SV << endl;
			cout << "Depreciacion Mobiliario y Equipo                                  " << DEPMB << endl;
			cout << "Depreciacion  Equipo de Computo                                   " << DEPEC << endl;
			cout << "Depreciacion  Vehiculos                                           " << DEPVH << endl;
			cout << "Amortizacion Gastos de Organizacion                               " << AMORGO << endl;
			cout << "Intereses Gasto                                                   " << INTG << endl;
			PG = comp + MI + DEVVENTAS + SA + SV + DEPMB + DEPEC + DEPVH + AMORGO + INTG;
			cout << "Perdidas y Ganacias                     " << PG << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                                 " << PG << "              " << comp + MI + DEVVENTAS + SA + SV + DEPMB + DEPEC + DEPVH + AMORGO + INTG << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");

			break;
		}

		case 23: {
			system("CLS");
			cout << "                            Partida de Cierre de Ganancias del Ejercicio" << endl;
			cout << "                                        DEBE                   HABER    " << endl;
			cout << "Ventas                                 " << Ventas << endl;
			cout << "Mercaderias II                         "; cin >> MI2;
			cout << "Devoluciones sobre Compras             " << DEVCOM << endl;
			cout << "Descuentos Percibidos                  " << DESC << endl;
			PG2 = Ventas + MI2 + DEVCOM + DESC;
			cout << "Perdidas y Ganancias                                             " << PG2 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                                 " << Ventas + MI2 + DEVCOM + DESC << "            " << PG2 << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");

			break;
		}
		case 24: {
			system("CLS");
			cout << "                            Partida de Cierre de Perdida o Ganancia del Ejercicio" << endl;
			PRG = PG2 - PG;
			if (PG > PG2) {

				cout << "                                       Perdida del Ejercicio" << endl;
				cout << "                                        DEBE                   HABER    " << endl;
				cout << "Capital                                " << PRG << endl;
				cout << "Perdidas y Ganancias                                             " << PRG << endl;
				cout << "                 ______________________________________________________" << endl;
				cout << "                 ______________________________________________________" << endl;
				cout << "TOTALES                                 " << PRG << "              " << PRG << endl;
				cout << "                 ______________________________________________________" << endl;
				cout << "                 ______________________________________________________";
				cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
				system("pause");
			}
			else {
				cout << "                                       Ganacias del Ejercicio" << endl;
				cout << "                                        DEBE                   HABER    " << endl;
				cout << "Capital                                " << PRG << endl;
				cout << "Perdidas y Ganancias                                              " << PRG << endl;
				cout << "                 ______________________________________________________" << endl;
				cout << "                 ______________________________________________________" << endl;
				cout << "TOTALES                                 " << PRG << "             " << PRG << endl;
				cout << "                 ______________________________________________________" << endl;
				cout << "                 ______________________________________________________";
				cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
				system("pause");
			}

			break;
		}
		case 25: {
			system("CLS");
			double CAP, Debe, Haber;
			CAP = capital + PRG;
			cout << "                                  Activos y Pasivos del Ejercicio       " << endl;
			cout << "                                        DEBE                   HABER    " << endl;
			cout << "Proveedores                                " << PRO << endl;
			cout << "Documentos Por Pagar                       " << DP << endl;
			cout << "Hipotecas                                  " << HP << endl;
			cout << "Depreciacion Acumulada Mobiliario y Equipo " << DEPACUMMB << endl;
			cout << "Depreciacion Acumulada Equipo de Computo   " << DEPACUMEC << endl;
			cout << "Depreciacion Acumulada Vehiculos           " << DEPACUMVH << endl;
			cout << "Amortizacion Acumulada Gastos de Org       " << AMORACUMGO << endl;
			cout << "Iva por pagar                              " << Iva_por_pagar << endl;
			cout << "Capital                                    " << CAP << endl;
			cout << "Caja y Bancos                                                   " << Cajabancos << endl;
			cout << "Documentos por Cobrar                                           " << Docc << endl;
			cout << "Clientes                                                        " << clientes << endl;
			cout << "Mercaderia                                                      " << MI2 << endl;
			cout << "Mobiliario y Equipo                                             " << ME << endl;
			cout << "Inmbuebles                                                      " << IM << endl;
			cout << "Equipo de Computacion                                           " << EC << endl;
			cout << "Gastos de Instalacion                                           " << GI << endl;
			cout << "Papelería y Utiles                                              " << PU << endl;
			cout << "Vehiculos                                                       " << VH << endl;
			cout << "Iva por Cobrar                                                  " << Ivacc << endl;
			Debe = PRO + DP + HP + DEPACUMMB + DEPACUMEC + DEPACUMVH + AMORACUMGO + CAP + Iva_por_pagar;
			Haber = Cajabancos + Docc + clientes + MI2 + ME + IM + EC + GI + PU + VH + Ivacc;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "TOTALES                                 " << Debe << "                   " << Haber << endl;
			cout << "                 ______________________________________________________" << endl;
			cout << "                 ______________________________________________________";
			cout << "\n\n\n\n\nPresione Enter para regresar al menu de Jornalizacion";
			system("pause");
			break;
		}
		case 26: {

			repite = false;
		}

		}
	} while (repite);

	return menu();
}

void Balnce() {
	double debe = 0, haber = 0;
	system("CLS");
	cout << "                        BALANCE DE SALDOS              " << endl;
	cout << "                            DEBE                     HABER   " << endl;
	cout << "Caja y Bancos               " << Cajabancos << endl;
	cout << "Clientes                    " << clientes << endl;
	cout << "Documentos por Cobrar       " << Docc << endl;
	cout << "Equipo de Computacion       " << EC << endl;
	cout << "Gastos de Instalacion       " << GI << endl;
	cout << "Inmbuebles                  " << IM << endl;
	cout << "Iva por Cobrar              " << Ivacc << endl;
	cout << "Mobiliario y Equipo         " << ME << endl;
	cout << "Mercaderia I                " << MI << endl;
	cout << "Papelería y Utiles          " << PU << endl;
	cout << "Vehiculos                   " << VH << endl;
	cout << "Compras                     " << comp << endl;
	cout << "Sueldos Sala de Ventas      " << SV << endl;
	cout << "Sueldos Administracion      " << SA << endl;
	cout << "Devoluciones S/Ventas       " << DEVVENTAS << endl;
	cout << "Intereses Gasto             " << INTG << endl;
	cout << "Depreciacion Mob y Equipo   " << DEPMB << endl;
	cout << "Depreciacion E de Computo   " << DEPEC << endl;
	cout << "Depreciacion Vehiculos      " << DEPVH << endl;
	cout << "Amortizacion Gastos de Org. " << AMORGO << endl;
	cout << "Ventas                                           " << Ventas;
	cout << "\nIva por pagar                                    " << Iva_por_pagar;
	cout << "\nProveedores                                      " << PRO;
	cout << "\nHipotecas                                        " << HP;
	cout << "\nDocumentos por pagar                             " << DP;
	cout << "\nDescuentos Percibidos                            " << DESC;
	cout << "\nDevoluciones S/Compras                           " << DEVCOM;
	cout << "\nDepreciacion Acumulada Mobiliario y Equipo       " << DEPACUMMB;
	cout << "\nDepreciacion Acumulada Equipo de Computo         " << DEPACUMEC;
	cout << "\nDepreciacion Acumulada Vehiculos                 " << DEPVH;
	cout << "\nAmortizacion Acumulada Gastos de Organizacion    " << AMORACUMGO;
	cout << "\nCapital                                          " << capital;
	debe = Cajabancos + clientes + Docc + EC + GI + IM + Ivacc + ME + MI + PU + VH + comp + SV + SA + DEVVENTAS + INTG + DEPMB + DEPEC + DEPVH + AMORGO;
	haber = Ventas + Iva_por_pagar + PRO + HP + DP + capital + DESC + DEVCOM + DEPACUMMB + DEPACUMEC + DEPVH + AMORACUMGO;
	cout << "\n                      __________________________________________" << endl;
	cout << "Totales                    " << debe << "                     " << haber << endl;
	cout << "                      __________________________________________" << endl;
	cout << "                      __________________________________________" << endl;
	system("pause");
	return menu();
}


void Resultados() {
	double GASTOSORG;
	system("CLS");
	cout << "                        ESTADO DE RESULTADOS            " << endl;
	cout << "                            Ingresos       " << endl;
	cout << "Ventas                                                                     " << Ventas << endl;
	cout << "Devoluciones Sobre ventas                                               (-)" << DEVVENTAS << endl;
	VENTASNETAS = Ventas - DEVVENTAS;
	cout << "                                                                   __________________" << endl;
	cout << "Ventas Netas                                                               " << VENTASNETAS << endl;
	cout << "\n\n                    Costo De Ventas          " << endl;
	cout << "Mercaderia I                                     " << MI << endl;
	cout << "Compras                      " << comp << endl;
	cout << "Devoluciones S/Compras    (-)" << DEVCOM << endl;
	cout << "                         __________________" << endl;
	COMPRASNETAS = comp - DEVCOM;
	cout << "Compras Netas                                    " << COMPRASNETAS << endl;
	cout << "                                          __________________" << endl;
	MERCAD = MI + COMPRASNETAS;
	cout << "Mercaderias Disponibles                          " << MERCAD << endl;
	cout << "Mercaderias II                              (-)  " << MI2 << endl;
	cout << "                                          __________________" << endl;
	COSTOV = MERCAD - MI2;
	cout << "Costo de Ventas                                                            " << COSTOV << endl;
	cout << "                                                                    __________________" << endl;
	GOP = VENTASNETAS - COSTOV;
	cout << "Ganancia o Perdida del Ejercicio                                           " << GOP << endl;
	cout << "\n\n                    Gastos De Operacion          " << endl;
	cout << "GASTOS DE ADMINISTRACION         " << endl;
	cout << "Sueldos Administracion         " << SA << endl;
	cout << "Depreciacion Mob y Equipo      " << DEPMB << endl;
	cout << "Depreciacion E de Computo      " << DEPEC << endl;
	cout << "Depreciacion Vehiculos         " << DEPVH << endl;
	cout << "Amortizacion Gastos de Org.    " << AMORGO << endl;
	cout << "                          __________________" << endl;
	GASTOSORG = SA + DEPMB + DEPEC + DEPVH + AMORGO;
	cout << "                                                 " << GASTOSORG << endl;
	cout << "GASTOS DE OPERACION         " << endl;
	cout << "Sueldos Sala de Ventas                           " << SV << endl;
	cout << "                                            __________________" << endl;
	GOP1 = GASTOSORG + SV;
	cout << "                                                                           " << GOP1 << endl;
	cout << "                                                                    __________________" << endl;
	GOP2 = GOP - GOP1;
	cout << "Perdida o Ganacia en Operacion                                             " << GOP2 << endl;
	cout << "OTROS GASTOS Y/O PRODUCTOS FINANCIEROS       " << endl;
	cout << "Otros Gastos        " << endl;
	cout << "Intereses Gasto                                 " << INTG << endl;
	cout << "Otros Productos Financieros       " << endl;
	cout << "Descuentos Percibidos                           " << DESC << endl;
	PRODUCGASTOS = INTG - DESC;
	cout << "                                             __________________            " << PRODUCGASTOS << endl;
	cout << "                                                                    __________________            " << endl;
	PEROGANAN = GOP2 - PRODUCGASTOS;
	cout << "Perdida o Ganancia del Ejercicio                                           " << PEROGANAN << endl;
	cout << "                                                                    __________________            " << endl;
	cout << "                                                                    __________________            " << endl;
	system("pause");
	return menu();
}



void General() {
	system("CLS");
	cout << "                       BALANCE GENERAL             " << endl;
	cout << "ACTIVO " << endl;
	cout << "Circulante " << endl;
	cout << "Caja y Bancos                                   " << Cajabancos << endl;
	cout << "Documentos por Cobrar                           " << Docc << endl;
	cout << "Iva por Cobrar                                  " << Ivacc << endl;
	cout << "Clientes                                        " << clientes << endl;
	cout << "Mercaderias                                     " << MI2 << endl;
	cout << "Inmbuebles                                      " << IM << endl;
	cout << "                                            __________________" << endl;
	ACCIRCULANTE = Cajabancos + Docc + clientes + MI2 + Ivacc + IM;
	cout << "TOtal Activo Circulante                                                    " << ACCIRCULANTE << endl;
	cout << "Fijo " << endl;
	cout << "Mobiliario y Equipo                             " << ME << endl;
	cout << "Depreciacion Acumulada Mobiliario y Equipo      " << DEPACUMMB << endl;
	cout << "                                            __________________" << endl;
	cout << "Equipo de Computacion                           " << EC << endl;
	cout << "Depreciacion Acumulada Equipo de Computo        " << DEPACUMEC << endl;
	cout << "                                            __________________" << endl;
	cout << "Vehiculos                                       " << VH << endl;
	cout << "Depreciacion Acumulada Vehiculos                " << DEPVH << endl;
	cout << "                                            __________________" << endl;
	ACFIJO = (ME + EC + VH) - (DEPACUMMB + DEPACUMEC + DEPVH);
	cout << "Total Activo Fijo                                                          " << ACFIJO << endl;
	cout << "Diferido" << endl;
	cout << "Gastos de Instalacion                           " << GI << endl;
	cout << "Amortizacion Acumulada Gastos de Org            " << AMORACUMGO << endl;
	cout << "                                            __________________" << endl;
	cout << "Papelería y Utiles                              " << PU << endl;
	ACDIFERIDO = (GI - AMORACUMGO) + PU;
	cout << "TOtal Activo Diferido                                                      " << ACDIFERIDO << endl;
	cout << "                                                                     __________________" << endl;
	SUMAACTIVO = ACCIRCULANTE + ACFIJO + ACDIFERIDO;
	cout << "Suma del Activo                                                            " << SUMAACTIVO << endl;
	cout << "                                                                     __________________" << endl;
	cout << "                                                                     __________________" << endl;
	cout << "PASIVO " << endl;
	cout << "Circulante " << endl;
	cout << "Proveedores                                      " << PRO << endl;
	cout << "Documentos por pagar                             " << DP << endl;
	cout << "Iva por pagar                                    " << Iva_por_pagar << endl;
	PASIVOCIR = PRO + DP + Iva_por_pagar;
	cout << "                                                                     __________________" << endl;
	cout << "Total Pasivo Circulante                                                    " << PASIVOCIR << endl;
	cout << "Fijo  " << endl;
	cout << "Hipotecas                                        " << HP << endl;
	PASIVOFIJO = HP;
	cout << "                                                                     __________________" << endl;
	cout << "Total Pasivo FIJO                                                          " << PASIVOFIJO << endl;
	cout << "Capital de la Empresa " << endl;
	cout << "Capital                                                                    " << capital << endl;
	cout << "Perdida o Ganancia del Ejercicio                                           " << PEROGANAN << endl;
	SUMAPASIVO = PASIVOCIR + PASIVOFIJO + capital + PEROGANAN;
	cout << "                                                                     __________________" << endl;
	cout << "Suma del Pasivo + Capital                                                  " << SUMAPASIVO << endl;
	cout << "                                                                     __________________" << endl;
	cout << "                                                                     __________________" << endl;

	system("pause");
	return menu();
}



void Razones() {
	system("CLS");
	bool repite = true;
	int opcion = 0;
	do {
		system("CLS");
		cout << "                      Razones Financieras            " << endl;
		cout << "1.Indice De Liquidez                                      " << endl;
		cout << "2.Prueba de Acido                                         " << endl;
		cout << "3.Prueba Defensiva                                        " << endl;
		cout << "4.Proporcion de Financiamiento Externo                    " << endl;
		cout << "5.Proporcion de Financiamiento Interno                    " << endl;
		cout << "6.Rotacion del Activo Total                               " << endl;
		cout << "7.Rotacion de Proveedores                                 " << endl;
		cout << "8.Rentabilidad Sobre Ventas                               " << endl;
		cout << "9.Utiliadad de Operacion a Ventas                         " << endl;
		cout << "10.Rentabilidad sobre el Activo                           " << endl;
		cout << "11.Rentabilidad sobre el Capital                          " << endl;
		cout << "12.Rotacion de Inventarios                                " << endl;
		cout << "13.Rotacion de Cuentas Por Cobrar                         " << endl;
		cout << "14.Origen de Capital a largo plazo                        " << endl;
		cout << "15.Indice de inversion del capital                        " << endl;
		cout << "16.Salir                                                  " << endl;
		cout << "\n\nElija una de Las Opciones: "; cin >> opcion;
		system("pause");
		switch (opcion) {

		case  1: {
			system("CLS");
			double Liquidez;
			cout << "                           Indice De Liquidez                          " << endl;
			cout << "\n Mide el grado en que una empresa puede cumplir con sus obligaciones a corto plazo" << endl;
			Liquidez = ACCIRCULANTE / PASIVOCIR;
			cout << "\n\nIndice De Liquidez = Activo Ciculante / Pasivo Circulante :" << Liquidez << endl;
			if (Liquidez == 0) {
				cout << "\nLa Empresa no Puede cubrir sus deudas con los recursos Actuales,, se recomienda elaboral una estrategia urgentemente ya que podria ir a la quiebra facilmente"<<endl;

			}
			else if ((Liquidez >= 0) && (Liquidez <= 1))
			{
				cout << "\nLa Empresa no Puede cubrir sus deudas con los recursos Actuales, , se recomienda elaboral una estrategia que permita elevar las ventas y como consecuencias los Activos"<<endl;
			}
			else if (Liquidez > 1 && Liquidez <= 2)
			{
				cout << "\nLa Empresa tiene la suficiente liquidez para cubrir sus deudas a corto plazo y quedar con un minimo para seguir operaciones, es priorida el crecimiento de las ventas "<<endl;

			}
			else if (Liquidez > 2)
			{
				cout << "\nLa Empresa tiene muy buena liquidez por lo cual en este momento puede cubrir todas las deudas a corto plazo y seguir operaciones sin ningun tipo de problema "<<endl;
			}

			system("pause");
			break;
		}

		case 2: {
			system("CLS");
			double Acido;
			cout << "                           Prueba del Acido                          " << endl;
			cout << "\n\n Mide el grado en que una empresa puede cumplir con sus obligaciones a corto plazo sin utilizar la mercaderia que posee en el momento" << endl;
			Acido = (ACCIRCULANTE - MI2) / PASIVOCIR;
			cout << "\nPrueba del Acido  = (Activo Ciculante - Inventarios ) / Pasivo Circulante :" << Acido << endl;
			if (Acido > 0 && Acido <= 1) {
				cout << "\nLa empresa no cuenta con la liquidez para solventar sus deudas a corto plazo sin usar el inventario" << endl;
				cout << "para aumentar el flujo de efectivo y poder solventarlas sin la necesidad de recurir a su Stock, se recomiendan nuevas inversiones en productos"<<endl;
			}
			else if (Acido > 1 && Acido <= 2) {
				cout << "\nCon la liquidez Acutal la empresa logra cubrir sus deudas sin utilizar su Stock,pero su flujo de efectivo baja considerablemente"<<endl;
			}
			else if (Acido > 2) {
				cout << "\nLa empresa posee buena liquidez, puede cubrir todas sus deudas sin usar sus inventarios y su flujo de efectivo puede mantenerse estable"<<endl;
			}
			system("pause");
			break;
		}


		case 3: {
			system("CLS");
			double defensiva;
			cout << "                           Prueba Defensiva                          " << endl;
			cout << "\n\nIndica la capacidad de la empresa para operar con sus activos mas liquidos, sin recurrir a sus flujos de venta " << endl;
			defensiva = Cajabancos / PASIVOCIR;
			cout << "\n\n Prueba Defensiva =  Caja y Bancos / Pasivo Circulante :" << defensiva << endl;
			if (defensiva > 0 && defensiva <= 1) {
				cout << "\n\n Con el efectivo Actual la empresa no puede cubrir sus deudas a corto plazo, se necesitaria elevar las ventas al contado para generar mejor liquidez" << endl;
			}
			else if (defensiva > 1 && defensiva <= 2) {
				cout << "\n\n Con el efectivo Actual la empresa puede cubrir sus deudas a corto plazo pero, su efectivo disminuiria considerablemente y tendria lo basico para seguir con sus operaciones" << endl;
			}
			else if (defensiva > 2) {
				cout << "\n\n Con el efectivo Actual la empresa puede cubrir sus deudas y su efectivo se mantiene estable, la empresa cuenta con una muy buena liquidez" << endl;
			}
			system("pause");
			break;
		}

		case 4: {
			system("CLS");
			double externo;
			cout << "                           Proporcion de Financiamiento Externo                         " << endl;
			cout << "\n Mide la proporcion de los activos totales financiados por los acreedores de la empresa " << endl;
			externo = (PASIVOCIR + PASIVOFIJO) / SUMAACTIVO;
			cout << "\n\n Proporcion de Financiamiento Externo = Pasivo Total / Activo Total: " << externo << endl;

			if (externo > 0 && externo >= 1) {
				cout << "El porcentaje de Endeudamiento es muy bajo la empresa no depende  de los Acreedores externos para su funcionamiento"<<endl;

			}

			else if (externo > 1 && externo <= 2) {

				cout << "El porcentaje de Endeudamiento es alto pero aun se pude cancelar mediante estrategias de eficiencia en las ventas"<<endl;
			}

			else if (externo > 2) {
				cout << "El Endeudamietno supera por mucho a lo bienes que posee la empresa es una situacion que requiere medidas inmediatas para poder disiminuir la deuda con los acreedores"<<endl;
			}

			system("pause");
			break;
		}
		case 5:
		{
			system("CLS");
			double interno;
			cout << "                   Proporcion de Financiamiento Interno                    " << endl;
			cout << "\n Expresa la relación que existe dentro de la estructura de capital entre los recursos proporcionados por los accionistas y los fondos propios" << endl;
			interno = capital / SUMAACTIVO;
			cout << "\n\nProporcion de Financiamiento Interno =   Capital / Activo Total : " << interno << endl;
			if (interno > 0 && interno <= 1) {
				cout << "La empresa depende de los recursos propios y ya no de la inversion de los accionistas"<<endl;
			}
			else if (interno > 1 && interno <= 2) {
				cout << "La empresa aun depende en parte de los recursos proporcionados por los socios aunque en poco tiempo puede elevar sus activos"<<endl;
			}
			else if (interno > 2) {
				cout << "La empresa no tiene Activos suficientas para valerse por si misma aun depende de las inversiones de los socios para poder crecer"<<endl;
			}
			system("pause");
			break;
		}
		case 6:
		{
			system("CLS");
			double rotacionactivo;
			int empresa;
			bool repite = true;
			do {
				cout << "                    Rotacion del Activo Total                               " << endl;
				cout << "\n Mide la eficacia general en el uso de los activos               " << endl;
				rotacionactivo = VENTASNETAS / SUMAACTIVO;
				cout << " \n\n   Rotacion del Activo Total = Ventas Netas / Activo Total:" << rotacionactivo << endl;
				cout << "\n\nEmpresa de Venta de Alimentos o Restaurantes no.1" << endl;
				cout << "Empresa de Venta de Ropa y Moda no.2" << endl;
				cout << "Empresa de Venta de Tecnologia no.3" << endl;
				cout << "Empresa de Venta de Mobiliario y Equipo no.4" << endl;
				cout << "Empresa de Venta de Vehiculos no.5" << endl;
				cout << "Empresa de Servicios no.6 " << endl;
				cout << "Ver otra razon financiera no.7" << endl;
				cout << "Escoja la Actividad principal del la empresa : "; cin >> empresa;

				switch (empresa) {
				case 1: {
					system("CLS");
					cout << "Empresa de Venta de Alimentos o Restaurantes" << endl;
					cout << " \n\n   Rotacion del Activo Total = Ventas Netas / Activo Total:" << rotacionactivo << endl;
					if (rotacionactivo == 0) {

						cout << "\nNo hubo rotacion en los activos de la empresa verificar este departamento y los procesos administrativos que estan aplicando" << endl;
					}

					else if (rotacionactivo <= 0.25) {
						cout << "\nLa rotacion de los Activos fue muy baja, la empresa no utiliza bien los activos para generar ventas " << endl;
					}
					else if (rotacionactivo > 0.25 && rotacionactivo <= 0.70)
					{
						cout << "\nLa rotacion en los Activos de la empresa mostro un grado aceptable y estable " << endl;
					}
					else if (rotacionactivo > 0.70) {

						cout << "\nLa rotacion en los Activos de la empresa fue muy buena la empresa utiliza correctamente sus activos para convertirlos en ventas" << endl;
					}


					system("pause");
					break;
				}
				case 2: {
					system("CLS");
					cout << "Empresa de Venta de Ropa y Moda" << endl;
					cout << " \n\n   Rotacion del Activo Total = Ventas Netas / Activo Total:" << rotacionactivo << endl;

					if (rotacionactivo == 0) {

						cout << "\nNo hubo rotacion en los activos de la empresa verificar este departamento y los procesos administrativos que estan aplicando" << endl;
					}

					else if (rotacionactivo <= 0.25) {
						cout << "\nLa rotacion de los Activos fue muy baja, la empresa no utiliza bien los activos para generar ventas " << endl;
					}
					else if (rotacionactivo > 0.25 && rotacionactivo <= 0.70)
					{
						cout << "\nLa rotacion en los Activos de la empresa mostro un grado aceptable y estable " << endl;
					}
					else if (rotacionactivo > 0.70) {

						cout << "\nLa rotacion en los Activos de la empresa fue muy buena la empresa utiliza correctamente sus activos para convertirlos en ventas" << endl;
					}
					system("pause");
					break;
				}
				case 3: {
					system("CLS");
					cout << "Empresa de Venta de Tecnologia " << endl;
					cout << " \n\n   Rotacion del Activo Total = Ventas Netas / Activo Total:" << rotacionactivo << endl;

					if (rotacionactivo == 0) {

						cout << "\nNo hubo rotacion en los activos de la empresa verificar este departamento y los procesos administrativos que estan aplicando" << endl;
					}

					else if (rotacionactivo <= 0.25) {
						cout << "\nLa rotacion de los Activos fue muy baja, la empresa no utiliza bien los activos para generar ventas " << endl;
					}
					else if (rotacionactivo > 0.25 && rotacionactivo <= 0.70)
					{
						cout << "\nLa rotacion en los Activos de la empresa mostro un grado aceptable y estable " << endl;
					}
					else if (rotacionactivo > 0.70) {

						cout << "\nLa rotacion en los Activos de la empresa fue muy buena la empresa utiliza correctamente sus activos para convertirlos en ventas" << endl;
					}
					system("pause");
					break;
				}
				case 4: {
					system("CLS");
					cout << "Empresa de Venta de Mobliario y equipo " << endl;
					cout << " \n\n   Rotacion del Activo Total = Ventas Netas / Activo Total:" << rotacionactivo << endl;

					if (rotacionactivo == 0) {

						cout << "\nNo hubo rotacion en los activos de la empresa verificar este departamento y los procesos administrativos que estan aplicando" << endl;
					}

					else if (rotacionactivo <= 0.25) {
						cout << "\nLa rotacion de los Activos fue muy baja, la empresa no utiliza bien los activos para generar ventas " << endl;
					}
					else if (rotacionactivo > 0.25 && rotacionactivo <= 0.70)
					{
						cout << "\nLa rotacion en los Activos de la empresa mostro un grado aceptable y estable " << endl;
					}
					else if (rotacionactivo > 0.70) {

						cout << "\nLa rotacion en los Activos de la empresa fue muy buena la empresa utiliza correctamente sus activos para convertirlos en ventas" << endl;
					}

					system("pause");
					break;
				}
				case 5: {
					system("CLS");
					cout << "Empresa de Venta de Vehiculos " << endl;
					cout << " \n\n   Rotacion del Activo Total = Ventas Netas / Activo Total:" << rotacionactivo << endl;

					if (rotacionactivo == 0) {

						cout << "\nNo hubo rotacion en los activos de la empresa verificar este departamento y los procesos administrativos que estan aplicando" << endl;
					}

					else if (rotacionactivo <= 0.25) {
						cout << "\nLa rotacion de los Activos fue muy baja, la empresa no utiliza bien los activos para generar ventas " << endl;
					}
					else if (rotacionactivo > 0.25 && rotacionactivo <= 0.70)
					{
						cout << "\nLa rotacion en los Activos de la empresa mostro un grado aceptable y estable " << endl;
					}
					else if (rotacionactivo > 0.70) {

						cout << "\nLa rotacion en los Activos de la empresa fue muy buena la empresa utiliza correctamente sus activos para convertirlos en ventas" << endl;
					}

					system("pause");
					break;
				}
				case 6: {
					system("CLS");
					cout << "Empresa de Prestacion de Servicios " << endl;
					cout << " \n\n   Rotacion del Activo Total = Ventas Netas / Activo Total:" << rotacionactivo << endl;

					if (rotacionactivo == 0) {

						cout << "\nNo hubo rotacion en los activos de la empresa verificar este departamento y los procesos administrativos que estan aplicando" << endl;
					}

					else if (rotacionactivo <= 0.25) {
						cout << "\nLa rotacion de los Activos fue muy baja, la empresa no utiliza bien los activos para generar ventas " << endl;
					}
					else if (rotacionactivo > 0.25 && rotacionactivo <= 0.70)
					{
						cout << "\nLa rotacion en los Activos de la empresa mostro un grado aceptable y estable " << endl;
					}
					else if (rotacionactivo > 0.70) {

						cout << "\nLa rotacion en los Activos de la empresa fue muy buena la empresa utiliza correctamente sus activos para convertirlos en ventas" << endl;
					}

					system("pause");
					break;
				}
				case 7: {
					repite = false;
				}




				}


			} while (repite);

			system("pause");
			break;
		}


		case 7:
		{
			system("CLS");
			double rotacionproveedores;
			cout << "                         Rotacion de Proveedores                              " << endl;
			cout << "\n Mide los dias de plazo que posee la empresa para los pagos a Proveedores, el calculo esta echo en año comercial 360 dias";
			rotacionproveedores = (PRO / COSTOV) * 360;
			cout << "\n Rotacion de Proveedores =  (Proveedores / Costo de Ventas ) * 360 dias: " << rotacionproveedores << endl;

			if (rotacionproveedores > 0 && rotacionproveedores <= 30) {
				cout << "La rotacion en tiempo que tiene la empresa con los proveedores es poca los dias plazo que se tiene con ellos limita el crecimiento del flujo de efectivo"<<endl;

			}
			else if (rotacionproveedores > 30 && rotacionproveedores <= 60) {
				cout << "La rotacion en tiempo que tiene la empresa con los proveedores es normal esta estable y tiene mas tiempo para utilizar invertir el efectivo antes de solventar las deudas "<<endl;
			}
			else if (rotacionproveedores > 60)
			{
				cout << "La rotacion en tiempo que tiene la empresa con los proveedores es muy buena, está logrando tener buenas relaciones con los proveedores y por eso el plazo de pago es mayor"<<endl;
			}
			system("pause");
			break;
		}
		case 8: {
			system("CLS");
			double rentabilidadventas;
			cout << "                          Rentabilidad Sobre Ventas             " << endl;
			rentabilidadventas = (GOP / VENTASNETAS) * 100;

			cout << "\n Refleja la proporcion que las utilidades brutas obtenidas representan con relacion a las ventas netas que las producen";
			cout << "\nRentabilidad sobre ventas = (Utilidad Neta  /  Ventas Netas ) * 100: " << rentabilidadventas << endl;

			if (rentabilidadventas < 0) {

				cout << "Al cierre del ejercicio la empresa tuvo pérdida"<<endl;
			}
			else if (rentabilidadventas > 0 && rentabilidadventas < 5) {
				cout << "El Margen Neto de Utilidad es muy bajo, se compro compra a precios muy altos y las ventas no generar una utilidad bruta aceptable"<<endl;
			}

			else if (rentabilidadventas > 5 && rentabilidadventas <= 30) {
				cout << "El Margen Neto de Utilidad de la empresa es estable, las ventas y las compras estan teniendo un  buen ritmo"<<endl;
			}
			else if (rentabilidadventas > 30) {
				cout << "El Margen Neto de Utilidad es muy bueno la empresa está generando muy buenas ventas en relacion a lo que compra "<<endl;
			}
			system("pause");
			break;

		}

		case 9: {
			system("CLS");
			double utilidadoperacion;
			cout << "             Utiliadad de Operacion a Ventas" << endl;
			cout << "\nMide la razon o por ciento que la utilidad neta representa con relacion a las ventas netas que se analizan" << endl;
			cout << "Mide la facilidad de convertir las ventas en utilidad" << endl;
			utilidadoperacion = (PEROGANAN / VENTASNETAS) * 100;
			cout << "\n\n Utilidad de Operacion a Ventas = (Utilidad Neta / Ventas Netas ) * 100: " << utilidadoperacion << endl;
			if (utilidadoperacion < 0) {
				cout << "\n\n No hay utilidad en el ejercicio, hubo perdidas al final del ejercicio "<<endl;
			}
			else if (utilidadoperacion > 0 && utilidadoperacion < 10) {
				cout << "\n\n El margen de utilidad operacional es bajo a la empresa la cuesta convertir en utilidad la ventas netas debido a los gastos "<<endl;

			}
			else if (utilidadoperacion > 10 && utilidadoperacion < 30) {
				cout << "\n\n El margen de utilidad operacional es es normal se mantiende estable, pero con reduccion estratégica en los gastos puede mejorar considerablemente "<<endl;
			}

			else if (utilidadoperacion > 30) {
				cout << "\n\n El margen de utilidad operacional es Alto en realcion a las ventas netas, a la empresa no le es problema convertir las ventas en utilidad y los gastos y costos son normales"<<endl;
			}



			system("pause");
			break;
		}
		case 10: {
			system("CLS");
			double rentabilidadactivo;
			cout << "                Rentabilidad sobre el Activo                           " << endl;
			cout << "  \n Mide el retorno obtenido por cada dolar invertido en activos";
			rentabilidadactivo = (PEROGANAN / SUMAACTIVO) * 100;
			cout << "\n\n Rentabilidad sobre el Activo = (Utilidad Neta / Activo Total): " << rentabilidadactivo << endl;
			if (rentabilidadactivo < 0) {
				cout << "El ejercicio no tuvo rentabilidad ya que al final del ejercicio se obtuvieron perdidas"<<endl;
			}

			else if (rentabilidadactivo > 0 && rentabilidadactivo < 5) {
				cout << "La rentabilidad es muy baja las ganancias en relacion a los Activos invertidos representan una minima parte y no ayuda al crecimiento de la empresa"<<endl;
			}

			else if (rentabilidadactivo > 5 && rentabilidadactivo < 15) {
				cout << "Las utilidades en relacion a los Activos invertidos fueron basicas sirven para que la empresa empiece a mejorar pero , se necesitan estrategias que impulsen las ventas"<<endl;

			}
			else if (rentabilidadactivo > 15 < 30) {
				cout << "Las utilidades permanecen estables al igual que los Activos , la empresa tiene una constante inversion y se esta reflejando en sus ganancias"<<endl;
			}
			else if (rentabilidadactivo > 30) {
				cout << "La empresa generó un gran porcentaje en realacion a los Activos invertidos actualmente, de mantener este ritmo crecerá muy rapido"<<endl;
			}
			system("pause");
			break;
		}
		case 11: {
			system("CLS");
			double rentabilidadcapital;
			cout << "             Rentabilidad sobre el Capital               " << endl;
			cout << "  \n Mide el rendimiento que la utilidad tuvo en base a la inversion de los socios";
			rentabilidadcapital = (PEROGANAN / capital) * 100;
			cout << "\n\n Rentabilidad sobre el Capital  = (Utilidad Neta / Capital ): " << rentabilidadcapital << endl;
			if (rentabilidadcapital < 0)
			{
				cout << "No hubo utilidad el ejercicio registró una perdida de " << PEROGANAN << endl;
			}

			else if (rentabilidadcapital > 0)
			{
				cout << "Los socios obtuvieron un rendimiento en su inversion del: " << rentabilidadcapital << " %" << endl;
			}
			system("pause");
			break;
		}
		case 12: {
			system("CLS");
			double rotacioninventario;
			int empresa;
			bool repite = true;
			do {
				cout << "                Rotacion de Inventarios                           " << endl;
				cout << "\n Mide el numero de veces que se han renovado las existencias durante un periodo el calculo esta realizado a un año comercial 360 dias" << endl;
				rotacioninventario = (MI2 / COSTOV) * 360;
				cout << "\n\n Rotacion de Inventarios  = (Mercaderia / Costo de ventas ): " << rotacioninventario << endl;
				cout << "\n\nEmpresa de Venta de Alimentos o Restaurantes no.1" << endl;
				cout << "Empresa de Venta de Ropa y Moda no.2" << endl;
				cout << "Empresa de Venta de Tecnologia no.3" << endl;
				cout << "Empresa de Venta de Mobiliario y Equipo no.4" << endl;
				cout << "Empresa de Venta de Vehiculos no.5" << endl;
				cout << "Empresa de Servicios no.6 " << endl;
				cout << "Ver otra razon financiera no.7" << endl;
				cout << "Escoja la Actividad principal del la empresa : "; cin >> empresa;

				switch (empresa) {
				case 1: {
					system("CLS");
					cout << "Empresa de Venta de Alimentos o Restaurantes" << endl;
					cout << "\n\n Rotacion de Inventarios  = (Mercaderia / Costo de ventas ): " << rotacioninventario << endl;
					if (rotacioninventario == 0) {

						cout << "\nNo hubo rotacion en el inventario la empresa no esta activa" << endl;
					}

					else if (rotacioninventario <= 5) {
						cout << "\nLa Rotacion del Inventario fue casi nula para el tipo de negocio esto significa perdidas demasiado altas con peligro de quiebra" << endl;
					}
					else if (rotacioninventario > 10 && rotacioninventario <= 15)
					{
						cout << "\nLa rotacion del inventario es muy baja significa que varios productos se echaron a perder y hubo grandes perdidas" << endl;
					}
					else if (rotacioninventario > 15 && rotacioninventario <= 30) {

						cout << "\nLa rotacion del Inventario fue normal para el tipo de negocio" << endl;
					}
					else if (rotacioninventario > 30) {
						cout << "\nLa rotacion del Inventrio fue muy buena se estan optimizando los rescursos y los productos se estan vendiendo muy bien " << endl;
					}



					system("pause");
					break;
				}
				case 2: {
					system("CLS");
					cout << "Empresa de Venta de Ropa y Moda" << endl;
					cout << "\n\n Rotacion de Inventarios  = (Mercaderia / Costo de ventas ): " << rotacioninventario << endl;
					if (rotacioninventario == 0) {

						cout << "\nNo hubo rotacion en el inventario la empresa no esta activa" << endl;
					}

					else if (rotacioninventario <= 5) {
						cout << "\nLa Rotacion del Inventario fue casi nula para el tipo de negocio esto significa perdidas demasiado altas con peligro de quiebra" << endl;
					}
					else if (rotacioninventario > 5 && rotacioninventario <= 10)
					{
						cout << "\nLa rotacion del inventario es muy baja significa que varios productos se echaron a perder y hubo grandes perdidas" << endl;
					}
					else if (rotacioninventario > 10 && rotacioninventario <= 20) {

						cout << "\nLa rotacion del Inventario fue normal para el tipo de negocio" << endl;
					}
					else if (rotacioninventario > 20) {
						cout << "\nLa rotacion del Inventrio fue muy buena se estan optimizando los rescursos y los productos se estan vendiendo muy bien " << endl;
					}

					system("pause");
					break;
				}
				case 3: {
					system("CLS");
					cout << "Empresa de Venta de Tecnologia " << endl;
					cout << "\n\n Rotacion de Inventarios  = (Mercaderia / Costo de ventas ): " << rotacioninventario << endl;

					if (rotacioninventario == 0) {

						cout << "\nNo hubo rotacion en el inventario la empresa no esta activa" << endl;
					}

					else if (rotacioninventario <= 3) {
						cout << "\nLa Rotacion del Inventario fue casi nula para el tipo de negocio esto significa perdidas demasiado altas con peligro de quiebra" << endl;
					}
					else if (rotacioninventario > 3 && rotacioninventario <= 5)
					{
						cout << "\nLa rotacion del inventario es muy baja significa que varios productos se echaron a perder y hubo grandes perdidas" << endl;
					}
					else if (rotacioninventario > 5 && rotacioninventario <= 10) {

						cout << "\nLa rotacion del Inventario fue normal para el tipo de negocio" << endl;
					}
					else if (rotacioninventario > 10) {
						cout << "\nLa rotacion del Inventrio fue muy buena se estan optimizando los rescursos y los productos se estan vendiendo muy bien " << endl;
					}
					system("pause");
					break;
				}
				case 4: {
					system("CLS");
					cout << "Empresa de Venta de Mobliario y equipo " << endl;
					cout << "\n\n Rotacion de Inventarios  = (Mercaderia / Costo de ventas ): " << rotacioninventario << endl;

					if (rotacioninventario == 0) {

						cout << "\nNo hubo rotacion en el inventario la empresa no esta activa" << endl;
					}

					else if (rotacioninventario <= 1) {
						cout << "\nLa Rotacion del Inventario fue casi nula para el tipo de negocio esto significa perdidas demasiado altas con peligro de quiebra" << endl;
					}
					else if (rotacioninventario > 1 && rotacioninventario <= 1.5)
					{
						cout << "\nLa rotacion del inventario es muy baja y hubo grandes perdidas" << endl;
					}
					else if (rotacioninventario > 1.5 && rotacioninventario <= 4.5) {

						cout << "\nLa rotacion del Inventario fue normal para el tipo de negocio" << endl;
					}
					else if (rotacioninventario > 4.5) {
						cout << "\nLa rotacion del Inventrio fue muy buena se estan optimizando los rescursos y los productos se estan vendiendo muy bien " << endl;
					}

					system("pause");
					break;
				}
				case 5: {
					system("CLS");
					cout << "Empresa de Venta de Vehiculos " << endl;
					cout << "\n\n Rotacion de Inventarios  = (Mercaderia / Costo de ventas ): " << rotacioninventario << endl;

					if (rotacioninventario == 0) {

						cout << "\nNo hubo rotacion en el inventario la empresa no esta activa" << endl;
					}

					else if (rotacioninventario <= 0.5) {
						cout << "\nLa Rotacion del Inventario fue casi nula para el tipo de negocio esto significa perdidas demasiado altas con peligro de quiebra" << endl;
					}
					else if (rotacioninventario > 0.5 && rotacioninventario <= 1)
					{
						cout << "\nLa rotacion del inventario es muy baja y hubo grandes perdidas" << endl;
					}
					else if (rotacioninventario > 1 && rotacioninventario <= 2) {

						cout << "\nLa rotacion del Inventario fue normal para el tipo de negocio" << endl;
					}
					else if (rotacioninventario > 2) {
						cout << "\nLa rotacion del Inventrio fue muy buena se estan optimizando los rescursos y los productos se estan vendiendo muy bien " << endl;
					}

					system("pause");
					break;
				}
				case 6: {
					system("CLS");
					cout << "Empresa de Prestacion de Servicios " << endl;
					cout << "\n\n Rotacion de Inventarios  = (Mercaderia / Costo de ventas ): " << rotacioninventario << endl;
					cout << "        \n\nEste tipo de empresa no posee inventarios revisar otra Razon Financiera" << endl;

					system("pause");
					break;
				}
				case 7: {
					repite = false;
				}
				}


			} while (repite);


			system("pause");
			break;
		}
		case 13: {
			system("CLS");
			double rotacionclientes;
			int empresa;
			bool repite = true;
			do {
				system("CLS");
				cout << "                         Rotacion de Cuentas Por Cobrar                         " << endl;
				cout << "\nMide el tiempo en que las cuentas por cobrar se convierten en Efectivo calculado en año comercial de 360 dias " << endl;
				rotacionclientes = (clientes / Ventas) * 360;
				cout << "\n\n Rotacion de Cuentas por cobrar = (Clientes / Ventas  ) * 360: " << rotacionclientes << endl;
				cout << "\n\nEmpresa de Venta de Alimentos o Restaurantes no.1" << endl;
				cout << "Empresa de Venta de Ropa y Moda no.2" << endl;
				cout << "Empresa de Venta de Tecnologia no.3" << endl;
				cout << "Empresa de Venta de Mobiliario y Equipo no.4" << endl;
				cout << "Empresa de Venta de Vehiculos no.5" << endl;
				cout << "Empresa de Servicios no.6 " << endl;
				cout << "Ver otra razon financiera no.7" << endl;
				cout << "\nEscoja la Actividad principal del la empresa : "; cin >> empresa;

				switch (empresa) {
				case 1: {
					system("CLS");
					cout << "Empresa de Venta de Alimentos o Restaurantes" << endl;
					cout << "\n\n\nEste tipo de Negocio no deberia tener cuentas por cobrar ya que debe ser venta al contado al momento del cosumo del cliente" << endl;
					system("pause");
					break;
				}
				case 2: {
					system("CLS");
					cout << "Empresa de Venta de Ropa y Moda" << endl;
					cout << "\n\nEste tipo de Negocio no deberia tener cuentas por cobrar ya que debe ser venta al contado al momento del cosumo del cliente" << endl;
					system("pause");
					break;
				}
				case 3: {
					system("CLS");
					cout << "Empresa de Venta de Tecnologia " << endl;
					cout << "\n\n Rotacion de Cuentas por cobrar = (Clientes / Ventas  )*360: " << rotacionclientes << endl;

					if (rotacionclientes == 0) {

						cout << "\nNo hubo rotacion en las cuentas por cobrar de la empresa verificar este departamento y los procesos administrativos que estan aplicando" << endl;
					}

					else if (rotacionclientes <= 20) {
						cout << "\nLa rotacion de las cuentas por cobrar fue muy baja, prestarle atencion al departamento de cuentas por cobrar" << endl;
					}
					else if (rotacionclientes > 20 && rotacionclientes <= 40)
					{
						cout << "\nLa rotacion de las cuentas por cobrar fue normal durante el año, aunque podria mejorar con estrategias en descuentos por pronto pago" << endl;
					}
					else if (rotacionclientes > 40) {

						cout << "\nLa rotacion de las cuentas por cobrar fue bastante bien a lo largo del año, los procesos que se tienen actualmente se estan funcionando" << endl;
					}
					system("pause");
					break;
				}
				case 4: {
					system("CLS");
					cout << "Empresa de Venta de Mobliario y equipo " << endl;
					cout << "\n\n Rotacion de Cuentas por cobrar = (Clientes / Ventas  )*360: " << rotacionclientes << endl;
					if (rotacionclientes == 0) {

						cout << "No hubo rotacion en las cuentas por cobrar de la empresa verificar este departamento y los procesos administrativos que estan aplicando";
					}

					else if (rotacionclientes <= 8) {
						cout << "La rotacion de las cuentas por cobrar fue muy baja, prestarle atencion al departamento de cuentas por cobrar";
					}
					else if (rotacionclientes > 8 && rotacionclientes <= 16)
					{
						cout << "La rotacion de las cuentas por cobrar fue normal durante el año, aunque podria mejorar con estrategias en descuentos por pronto pago";
					}
					else if (rotacionclientes > 16) {

						cout << "La rotacion de las cuentas por cobrar fue bastante bien a lo largo del año, los procesos que se tienen actualmente se estan funcionando";
					}

					system("pause");
					break;
				}
				case 5: {
					system("CLS");
					cout << "Empresa de Venta de Vehiculos " << endl;
					cout << "\n\n Rotacion de Cuentas por cobrar = (Clientes / Ventas  )*360: " << rotacionclientes << endl;
					if (rotacionclientes == 0) {

						cout << "No hubo rotacion en las cuentas por cobrar de la empresa verificar este departamento y los procesos administrativos que estan aplicando"<<endl;
					}

					else if (rotacionclientes <= 4) {
						cout << "La rotacion de las cuentas por cobrar fue muy baja, prestarle atencion al departamento de cuentas por cobrar"<<endl;
					}
					else if (rotacionclientes > 4 && rotacionclientes <= 10)
					{
						cout << "La rotacion de las cuentas por cobrar fue normal durante el año, aunque podria mejorar con estrategias en descuentos por pronto pago"<<endl;
					}
					else if (rotacionclientes > 10) {

						cout << "La rotacion de las cuentas por cobrar fue bastante bien a lo largo del año, los procesos que se tienen actualmente se estan funcionando"<<endl;
					}

					system("pause");
					break;
				}
				case 6: {
					system("CLS");
					cout << "Empresa de Prestacion de Servicios " << endl;
					cout << "\n\n Rotacion de Cuentas por cobrar = (Clientes / Ventas  )*360: " << rotacionclientes << endl;
					if (rotacionclientes == 0) {

						cout << "No hubo rotacion en las cuentas por cobrar de la empresa verificar este departamento y los procesos administrativos que estan aplicando";
					}

					else if (rotacionclientes <= 15) {
						cout << "La rotacion de las cuentas por cobrar fue muy baja, prestarle atencion al departamento de cuentas por cobrar";
					}
					else if (rotacionclientes > 15 && rotacionclientes <= 35)
					{
						cout << "La rotacion de las cuentas por cobrar fue normal durante el año, aunque podria mejorar con estrategias en descuentos por pronto pago";
					}
					else if (rotacionclientes > 35) {

						cout << "La rotacion de las cuentas por cobrar fue bastante bien a lo largo del año, los procesos que se tienen actualmente se estan funcionando";
					}

					system("pause");
					break;
				}
				case 7: {
					repite = false;
				}




				}


			} while (repite);

			system("pause");
			break;
		}
		case 14: {
			system("CLS");
			double pasivolargo;
			cout << "          Origen de Capital a largo plazo                    " << endl;
			cout << "Mide el grado de Deudas a largo plazo en relacion al capital" << endl;
			pasivolargo = PASIVOFIJO / capital;
			cout << " Origen de Capital a largo plazo =  (Pasivo Fijo / Capital) : " << pasivolargo << endl;
			if (pasivolargo > 0 && pasivolargo >= 1) {
				cout << "La inversion es mayor que las deudas a largo plazo indicando que la empresa no depende de terceros y las deudas mas fuertes las puede solventar" << endl;
			}
			else if (pasivolargo > 1 && pasivolargo >= 2) {
				cout << "Las deudas a largo plazo son un poco mayores a la inversion de capital aun son deudas controlables pero se deben tomar muy encuenta" << endl;
			}
			else if (pasivolargo > 2) {
				cout << "Las deudas a largo plazo son de mas del doble del capital invertido la empresa es dependiente totalmente de terceros" << endl;
			}
			system("pause");
			break;
		}
		case 15: {
			system("CLS");
			double activolargo;
			cout << "                          Indice de inversion del capital                        " << endl;
			cout << "\n\n Muestra la relación que guardan los bienes estables con el capital propio que es una inversión permanente " << endl;
			activolargo = ACFIJO / capital;
			cout << "\nIndice de inversion del capital = Activo Fijo  / Capital:" << activolargo << endl;
			if (activolargo > 0 && activolargo <= 1) {
				cout << "\nLa empresa aun no tiene Activos Fijos estables la inversion de capital aun es muy superior" << endl;

			}
			else if (activolargo > 1 && activolargo <= 2) {
				cout << "\nLos Activos fijos de la empresa son mayores al capital, Esto indica que la emprsa ya tiene estructura de bienes propios estable"<<endl;
			}
			else if (activolargo > 2) {
				cout << "\n Los Activos fijos sobre pasan por mas del doble al capital, indicando que la empresa posee una estructura de bienes propios y no necesita inversion de capital en este rubro"<<endl;
			}
			system("pause");
			break;


			break;
		}
		case 16: {
			repite = false;
			break;
		}
		}
	} while (repite);

}






void miembros() {
	system("CLS");

	cout << "           Nombre : Marlon Adrian Gonzalez Garzona       Carnet : 6990-19-12170" << endl;
	cout << "           Nombre : Marcos Sleyther Castellanos Lemus	 Carnet : 6990-19-9299" << endl;
	cout << "           Nombre : Luis Simon Lorenzo Gonzalez          Carnet : 6990-19-12141" << endl;
	cout << "           Nombre : Eduardo Antonio Perez Ajquijay       Carnet : 6990-19-547";
	cout << "\n\n\n\n             'Si puedes imaginarlo, puedes programarlo'  " << endl;
	cout << "                         Alejandro Taboada (1997 - 2019)" << endl;


	
	system("pause");
	return menu();

}

void version() {
	system("CLS");
	cout << "                         Version del Programa 1.0.1  Copyrigth 2019 "<<endl;
	system("pause");
	return menu();
}
